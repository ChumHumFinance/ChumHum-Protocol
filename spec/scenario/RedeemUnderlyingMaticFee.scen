-- Redeem Tests

Test "Mint then Redeem All"
    NewFeeComptroller
    ListedMATICToken cMATIC initialExchangeRate:0.005e9
    CallMintMatic Geoff 0.005e18 cMATIC
    -- Check current affairs
    Assert Equal (Erc20 cMATIC TokenBalance Geoff) 10e8
    Assert Equal (CToken cMATIC UnderlyingBalance Geoff) 0.005e18
    Invariant Static (CToken cMATIC ExchangeRateStored)
    -- Now redeem after some time
    FastForward 2 Blocks
    Expect Changes (MATICBalance Geoff) +4.9995e15
    RedeemUnderlyingMatic Geoff 0.005e18 cMATIC
    Assert Equal (Erc20 cMATIC TokenBalance Geoff) Zero
    Assert Equal (CToken cMATIC UnderlyingBalance Geoff) Zero

Test "Mint then Redeem Part"
    NewFeeComptroller
    ListedMATICToken cMATIC initialExchangeRate:0.005e9
    CallMintMatic Geoff 0.005e18 cMATIC
    -- Check current affairs
    Assert Equal (Erc20 cMATIC TokenBalance Geoff) 10e8
    Assert Equal (CToken cMATIC UnderlyingBalance Geoff) 0.005e18
    Invariant Static (CToken cMATIC ExchangeRateStored)
    -- Now redeem after some time
    FastForward 2 Blocks
    Expect Changes (MATICBalance Geoff) +9.999e14
    RedeemUnderlyingMatic Geoff 0.001e18 cMATIC
    Assert Equal (Erc20 cMATIC TokenBalance Geoff) 8e8
    Assert Equal (CToken cMATIC UnderlyingBalance Geoff) 0.004e18

Test "Mint then Redeem Too Much"
    NewFeeComptroller
    ListedMATICToken cMATIC initialExchangeRate:0.005e9
    CallMintMatic Geoff 0.005e18 cMATIC
    AllowFailures
    -- Check and hold static
    Invariant Static (CToken cMATIC ExchangeRateStored)
    Invariant Remains (Erc20 cMATIC TokenBalance Geoff) 10e8
    Invariant Static (MATICBalance Geoff)
    -- Now redeem after some time
    FastForward 2 Blocks
    RedeemUnderlyingMatic Geoff 0.0055e18 cMATIC
    -- TODO: This should really be REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED, but based on
    -- the order of subtractions, total supply comes before account supply.
    Assert Failure MATH_ERROR REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED "3" -- TODO: This error is wrong

Test "Mint then Redeem Zero"
    NewFeeComptroller
    ListedMATICToken cMATIC initialExchangeRate:0.005e9
    CallMintMatic Geoff 0.005e18 cMATIC
    -- Check and hold static
    Invariant Static (CToken cMATIC ExchangeRateStored)
    Invariant Remains (Erc20 cMATIC TokenBalance Geoff) 10e8
    Invariant Static (MATICBalance Geoff)
    -- Now redeem after some time
    FastForward 2 Blocks
    RedeemUnderlyingMatic Geoff 0e18 cMATIC

Test "Mint then redeem with interest - no reserves"
    Invariant Success
    NewFeeComptroller
    ListedMATICToken cMATIC initialExchangeRate:1e9
    Invariant Remains (CToken cMATIC Reserves) Zero
    CallMintMatic Geoff 50e18 cMATIC
    Assert Equal (Erc20 cMATIC TokenBalance Geoff) 500e8
    Assert Equal (CToken cMATIC UnderlyingBalance Geoff) 50e18
    Assert Equal (CToken cMATIC ExchangeRate) 1e9
    -- Get some brah to borrow then repay
    BorrowAndRepayMaticWithInterest cMATIC 10e18 5e18 interestRate:0.000001 blocks:500000
    -- We've accrued 10% interest for 5 blocks, or 50% of the amount,
    --   thus, we should have accrued 5e18 of interest for the protocol
    --   This is due pro-rata to all holders, but we just have one, so
    --   let's check that account is given correct new balance.
    Assert Equal (Erc20 cMATIC TokenBalance Geoff) 500e8
    Assert Equal (CToken cMATIC UnderlyingBalance Geoff) 55e18
    Assert Equal (CToken cMATIC ExchangeRate) 1.1e9
    -- Now redeem all with interest
    Expect Changes (MATICBalance Geoff) 5.49945e19
    RedeemUnderlyingMatic Geoff 55e18 cMATIC
    Assert Equal (MATICBalance cMATIC) 0e18
    Assert Equal (Erc20 cMATIC TokenBalance Geoff) 0e8
    Assert Equal (CToken cMATIC UnderlyingBalance Geoff) 0e18
    Assert Equal (CToken cMATIC ExchangeRate) 1e9

Pending "Mint then redeem part with interest - no reserves"
    Invariant Success
    NewFeeComptroller
    ListedCToken ZRX cMATIC initialExchangeRate:1e9
    Invariant Remains (CToken cMATIC Reserves) Zero
    Prep Geoff 50e18 ZRX cMATIC
    Mint Geoff 50e18 cMATIC
    Assert Equal (Erc20 cMATIC TokenBalance Geoff) 500e8
    Assert Equal (CToken cMATIC UnderlyingBalance Geoff) 50e18
    Assert Equal (CToken cMATIC ExchangeRate) 1e9
    -- Get some brah to borrow then repay
    BorrowAndRepayWithInterest ZRX cMATIC 10e18 5e18 interestRate:0.000001 blocks:500000
    -- We've accrued 10% interest for 5 blocks, or 50% of the amount,
    --   thus, we should have accrued 5e18 of interest for the protocol
    --   This is due pro-rata to all holders, but we just have one, so
    --   let's check that account is given correct new balance.
    Assert Equal (Erc20 cMATIC TokenBalance Geoff) 500e8
    Assert Equal (CToken cMATIC UnderlyingBalance Geoff) 55e18
    Assert Equal (CToken cMATIC ExchangeRate) 1.1e9
    -- Now redeem all with interest
    Redeem Geoff 499e8 cMATIC
    Assert Equal (Erc20 cMATIC TokenBalance Geoff) 1e8
    Assert Equal (CToken cMATIC UnderlyingBalance Geoff) 0.11e18
    Assert Equal (CToken cMATIC ExchangeRate) 1.1e9

Pending "Mint then redeem with reserves and interest"
    Invariant Success
    NewFeeComptroller
    ListedCToken ZRX cMATIC initialExchangeRate:1e9
    Prep Geoff 50e18 ZRX cMATIC
    Mint Geoff 50e18 cMATIC
    Assert Equal (Erc20 cMATIC TokenBalance Geoff) 500e8
    Assert Equal (CToken cMATIC UnderlyingBalance Geoff) 50e18
    Assert Equal (CToken cMATIC ExchangeRate) 1e9
    -- Get some brah to borrow then repay
    BorrowAndRepayWithInterest ZRX cMATIC 10e18 5e18 interestRate:0.000001 blocks:500000 reserveRate:0.2
    -- We've accrued 10% interest for 5 blocks, or 50% of the amount,
    --   thus, we should have accrued 5e18 of interest for the protocol
    --   The reserves should get 20% of this, or 1e18, and the rest
    --   is due pro-rata to all holders. We just have one, so
    --   let's check that account is given correct new balance.
    Assert Equal (Erc20 cMATIC TokenBalance Geoff) 500e8
    Assert Equal (CToken cMATIC Reserves) 1e18
    Assert Equal (CToken cMATIC UnderlyingBalance Geoff) 54e18
    -- 55e18 + 0e18 - 1e18 / 500
    Assert Equal (CToken cMATIC ExchangeRate) 1.08e9
    -- Now redeem all with interest
    Redeem Geoff 500e8 cMATIC
    Assert Equal (Erc20 ZRX TokenBalance Geoff) 54e18
    Assert Equal (Erc20 ZRX TokenBalance cMATIC) 1e18
    Assert Equal (Erc20 cMATIC TokenBalance Geoff) 0e8
    Assert Equal (CToken cMATIC Reserves) 1e18
    Assert Equal (CToken cMATIC UnderlyingBalance Geoff) 0e18
    Assert Equal (CToken cMATIC ExchangeRate) 1e9

Test "Two users Mint, one redeems"
    NewFeeComptroller
    ListedMATICToken cMATIC initialExchangeRate:0.005e9
    CallMintMatic Geoff 0.002e18 cMATIC
    Assert Equal (Erc20 cMATIC TokenBalance Geoff) 4e8
    Assert Equal (Erc20 cMATIC TotalSupply) 4e8
    CallMintMatic Torrey 0.004e18 cMATIC
    Assert Equal (Erc20 cMATIC TokenBalance Geoff) 4e8
    Assert Equal (Erc20 cMATIC TokenBalance Torrey) 8e8
    Assert Equal (Erc20 cMATIC TotalSupply) 12e8
    RedeemUnderlyingMatic Torrey 0.0015e18 cMATIC
    Assert Equal (Erc20 cMATIC TokenBalance Geoff) 4e8
    Assert Equal (Erc20 cMATIC TokenBalance Torrey) 5e8
    Assert Equal (Erc20 cMATIC TotalSupply) 9e8

Test "Mint then redeem 1 wei"
    NewFeeComptroller
    ListedMATICToken cMATIC initialExchangeRate:0.005e9
    CallMintMatic Geoff 0.005e18 cMATIC
    AllowFailures
    -- Check current affairs
    Assert Equal (Erc20 cMATIC TokenBalance Geoff) 10e8
    Assert Equal (CToken cMATIC UnderlyingBalance Geoff) 0.005e18
    Invariant Static (CToken cMATIC ExchangeRateStored)
    Invariant Static (MATICBalance Geoff)
    -- Now redeem after some time
    FastForward 2 Blocks
    RedeemUnderlyingMatic Geoff 1 cMATIC
    Assert Revert "revert redeemTokens zero"
